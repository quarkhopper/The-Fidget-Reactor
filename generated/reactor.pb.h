// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: reactor.proto
// Protobuf C++ Version: 5.29.3

#ifndef reactor_2eproto_2epb_2eh
#define reactor_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029003
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_reactor_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_reactor_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_reactor_2eproto;
namespace reactor {
class SimStateUpdate;
struct SimStateUpdateDefaultTypeInternal;
extern SimStateUpdateDefaultTypeInternal _SimStateUpdate_default_instance_;
class UIEvent;
struct UIEventDefaultTypeInternal;
extern UIEventDefaultTypeInternal _UIEvent_default_instance_;
}  // namespace reactor
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace reactor {

// ===================================================================


// -------------------------------------------------------------------

class UIEvent final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:reactor.UIEvent) */ {
 public:
  inline UIEvent() : UIEvent(nullptr) {}
  ~UIEvent() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(UIEvent* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(UIEvent));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR UIEvent(
      ::google::protobuf::internal::ConstantInitialized);

  inline UIEvent(const UIEvent& from) : UIEvent(nullptr, from) {}
  inline UIEvent(UIEvent&& from) noexcept
      : UIEvent(nullptr, std::move(from)) {}
  inline UIEvent& operator=(const UIEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline UIEvent& operator=(UIEvent&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UIEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const UIEvent* internal_default_instance() {
    return reinterpret_cast<const UIEvent*>(
        &_UIEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(UIEvent& a, UIEvent& b) { a.Swap(&b); }
  inline void Swap(UIEvent* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UIEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UIEvent* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<UIEvent>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const UIEvent& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const UIEvent& from) { UIEvent::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(UIEvent* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "reactor.UIEvent"; }

 protected:
  explicit UIEvent(::google::protobuf::Arena* arena);
  UIEvent(::google::protobuf::Arena* arena, const UIEvent& from);
  UIEvent(::google::protobuf::Arena* arena, UIEvent&& from) noexcept
      : UIEvent(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kComponentFieldNumber = 1,
    kActionFieldNumber = 2,
    kValueFieldNumber = 3,
  };
  // string component = 1;
  void clear_component() ;
  const std::string& component() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_component(Arg_&& arg, Args_... args);
  std::string* mutable_component();
  PROTOBUF_NODISCARD std::string* release_component();
  void set_allocated_component(std::string* value);

  private:
  const std::string& _internal_component() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_component(
      const std::string& value);
  std::string* _internal_mutable_component();

  public:
  // string action = 2;
  void clear_action() ;
  const std::string& action() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_action(Arg_&& arg, Args_... args);
  std::string* mutable_action();
  PROTOBUF_NODISCARD std::string* release_action();
  void set_allocated_action(std::string* value);

  private:
  const std::string& _internal_action() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_action(
      const std::string& value);
  std::string* _internal_mutable_action();

  public:
  // int32 value = 3;
  void clear_value() ;
  ::int32_t value() const;
  void set_value(::int32_t value);

  private:
  ::int32_t _internal_value() const;
  void _internal_set_value(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:reactor.UIEvent)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      39, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const UIEvent& from_msg);
    ::google::protobuf::internal::ArenaStringPtr component_;
    ::google::protobuf::internal::ArenaStringPtr action_;
    ::int32_t value_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_reactor_2eproto;
};
// -------------------------------------------------------------------

class SimStateUpdate final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:reactor.SimStateUpdate) */ {
 public:
  inline SimStateUpdate() : SimStateUpdate(nullptr) {}
  ~SimStateUpdate() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SimStateUpdate* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SimStateUpdate));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SimStateUpdate(
      ::google::protobuf::internal::ConstantInitialized);

  inline SimStateUpdate(const SimStateUpdate& from) : SimStateUpdate(nullptr, from) {}
  inline SimStateUpdate(SimStateUpdate&& from) noexcept
      : SimStateUpdate(nullptr, std::move(from)) {}
  inline SimStateUpdate& operator=(const SimStateUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline SimStateUpdate& operator=(SimStateUpdate&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SimStateUpdate& default_instance() {
    return *internal_default_instance();
  }
  static inline const SimStateUpdate* internal_default_instance() {
    return reinterpret_cast<const SimStateUpdate*>(
        &_SimStateUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(SimStateUpdate& a, SimStateUpdate& b) { a.Swap(&b); }
  inline void Swap(SimStateUpdate* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SimStateUpdate* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SimStateUpdate* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SimStateUpdate>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SimStateUpdate& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SimStateUpdate& from) { SimStateUpdate::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SimStateUpdate* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "reactor.SimStateUpdate"; }

 protected:
  explicit SimStateUpdate(::google::protobuf::Arena* arena);
  SimStateUpdate(::google::protobuf::Arena* arena, const SimStateUpdate& from);
  SimStateUpdate(::google::protobuf::Arena* arena, SimStateUpdate&& from) noexcept
      : SimStateUpdate(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kComponentFieldNumber = 1,
    kStateFieldNumber = 2,
    kNumericValueFieldNumber = 3,
  };
  // string component = 1;
  void clear_component() ;
  const std::string& component() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_component(Arg_&& arg, Args_... args);
  std::string* mutable_component();
  PROTOBUF_NODISCARD std::string* release_component();
  void set_allocated_component(std::string* value);

  private:
  const std::string& _internal_component() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_component(
      const std::string& value);
  std::string* _internal_mutable_component();

  public:
  // string state = 2;
  void clear_state() ;
  const std::string& state() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_state(Arg_&& arg, Args_... args);
  std::string* mutable_state();
  PROTOBUF_NODISCARD std::string* release_state();
  void set_allocated_state(std::string* value);

  private:
  const std::string& _internal_state() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_state(
      const std::string& value);
  std::string* _internal_mutable_state();

  public:
  // int32 numeric_value = 3;
  void clear_numeric_value() ;
  ::int32_t numeric_value() const;
  void set_numeric_value(::int32_t value);

  private:
  ::int32_t _internal_numeric_value() const;
  void _internal_set_numeric_value(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:reactor.SimStateUpdate)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      45, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SimStateUpdate& from_msg);
    ::google::protobuf::internal::ArenaStringPtr component_;
    ::google::protobuf::internal::ArenaStringPtr state_;
    ::int32_t numeric_value_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_reactor_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// UIEvent

// string component = 1;
inline void UIEvent::clear_component() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.component_.ClearToEmpty();
}
inline const std::string& UIEvent::component() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:reactor.UIEvent.component)
  return _internal_component();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UIEvent::set_component(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.component_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:reactor.UIEvent.component)
}
inline std::string* UIEvent::mutable_component() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_component();
  // @@protoc_insertion_point(field_mutable:reactor.UIEvent.component)
  return _s;
}
inline const std::string& UIEvent::_internal_component() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.component_.Get();
}
inline void UIEvent::_internal_set_component(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.component_.Set(value, GetArena());
}
inline std::string* UIEvent::_internal_mutable_component() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.component_.Mutable( GetArena());
}
inline std::string* UIEvent::release_component() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:reactor.UIEvent.component)
  return _impl_.component_.Release();
}
inline void UIEvent::set_allocated_component(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.component_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.component_.IsDefault()) {
    _impl_.component_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:reactor.UIEvent.component)
}

// string action = 2;
inline void UIEvent::clear_action() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.action_.ClearToEmpty();
}
inline const std::string& UIEvent::action() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:reactor.UIEvent.action)
  return _internal_action();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UIEvent::set_action(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.action_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:reactor.UIEvent.action)
}
inline std::string* UIEvent::mutable_action() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_action();
  // @@protoc_insertion_point(field_mutable:reactor.UIEvent.action)
  return _s;
}
inline const std::string& UIEvent::_internal_action() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.action_.Get();
}
inline void UIEvent::_internal_set_action(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.action_.Set(value, GetArena());
}
inline std::string* UIEvent::_internal_mutable_action() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.action_.Mutable( GetArena());
}
inline std::string* UIEvent::release_action() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:reactor.UIEvent.action)
  return _impl_.action_.Release();
}
inline void UIEvent::set_allocated_action(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.action_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.action_.IsDefault()) {
    _impl_.action_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:reactor.UIEvent.action)
}

// int32 value = 3;
inline void UIEvent::clear_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_ = 0;
}
inline ::int32_t UIEvent::value() const {
  // @@protoc_insertion_point(field_get:reactor.UIEvent.value)
  return _internal_value();
}
inline void UIEvent::set_value(::int32_t value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:reactor.UIEvent.value)
}
inline ::int32_t UIEvent::_internal_value() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.value_;
}
inline void UIEvent::_internal_set_value(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_ = value;
}

// -------------------------------------------------------------------

// SimStateUpdate

// string component = 1;
inline void SimStateUpdate::clear_component() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.component_.ClearToEmpty();
}
inline const std::string& SimStateUpdate::component() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:reactor.SimStateUpdate.component)
  return _internal_component();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SimStateUpdate::set_component(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.component_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:reactor.SimStateUpdate.component)
}
inline std::string* SimStateUpdate::mutable_component() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_component();
  // @@protoc_insertion_point(field_mutable:reactor.SimStateUpdate.component)
  return _s;
}
inline const std::string& SimStateUpdate::_internal_component() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.component_.Get();
}
inline void SimStateUpdate::_internal_set_component(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.component_.Set(value, GetArena());
}
inline std::string* SimStateUpdate::_internal_mutable_component() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.component_.Mutable( GetArena());
}
inline std::string* SimStateUpdate::release_component() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:reactor.SimStateUpdate.component)
  return _impl_.component_.Release();
}
inline void SimStateUpdate::set_allocated_component(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.component_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.component_.IsDefault()) {
    _impl_.component_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:reactor.SimStateUpdate.component)
}

// string state = 2;
inline void SimStateUpdate::clear_state() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.state_.ClearToEmpty();
}
inline const std::string& SimStateUpdate::state() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:reactor.SimStateUpdate.state)
  return _internal_state();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SimStateUpdate::set_state(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.state_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:reactor.SimStateUpdate.state)
}
inline std::string* SimStateUpdate::mutable_state() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_state();
  // @@protoc_insertion_point(field_mutable:reactor.SimStateUpdate.state)
  return _s;
}
inline const std::string& SimStateUpdate::_internal_state() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.state_.Get();
}
inline void SimStateUpdate::_internal_set_state(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.state_.Set(value, GetArena());
}
inline std::string* SimStateUpdate::_internal_mutable_state() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.state_.Mutable( GetArena());
}
inline std::string* SimStateUpdate::release_state() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:reactor.SimStateUpdate.state)
  return _impl_.state_.Release();
}
inline void SimStateUpdate::set_allocated_state(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.state_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.state_.IsDefault()) {
    _impl_.state_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:reactor.SimStateUpdate.state)
}

// int32 numeric_value = 3;
inline void SimStateUpdate::clear_numeric_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.numeric_value_ = 0;
}
inline ::int32_t SimStateUpdate::numeric_value() const {
  // @@protoc_insertion_point(field_get:reactor.SimStateUpdate.numeric_value)
  return _internal_numeric_value();
}
inline void SimStateUpdate::set_numeric_value(::int32_t value) {
  _internal_set_numeric_value(value);
  // @@protoc_insertion_point(field_set:reactor.SimStateUpdate.numeric_value)
}
inline ::int32_t SimStateUpdate::_internal_numeric_value() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.numeric_value_;
}
inline void SimStateUpdate::_internal_set_numeric_value(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.numeric_value_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace reactor


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // reactor_2eproto_2epb_2eh
